{"version":3,"file":"static/js/431.fe7c7ff8.chunk.js","mappings":"uQAGaA,GAAcC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uMAY1BC,GAAYJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAaM,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,4EAOzBI,EAAiBP,EAAAA,EAAOQ,MAAKC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,4EAO7BO,GAAaV,EAAAA,EAAAA,GAAOW,EAAAA,GAAPX,CAAoBY,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,8CAKjCU,EAAeb,EAAAA,EAAOc,OAAMC,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,gS,SCyDzC,EA5EqB,WACnB,IAAMa,GAASC,EAAAA,EAAAA,MACTC,GAAUD,EAAAA,EAAAA,MACVE,GAAaF,EAAAA,EAAAA,MACbG,GAAWC,EAAAA,EAAAA,MAQXC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,SAAS,YACZC,MAAOL,EAAAA,KAAaK,MAAM,yBAAyBD,SAAS,YAC5DE,SAAUN,EAAAA,KAEPO,IAAI,EAAG,iCACPH,SAAS,uBAkBd,OACEI,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAtCkB,CACpBR,KAAM,GACNG,MAAO,GACPC,SAAU,IAoCRP,iBAAkBA,EAClBY,SAnBsB,SAAHC,EAA+BC,GAAa,IAAtCX,EAAIU,EAAJV,KAAMG,EAAKO,EAALP,MAAOC,EAAQM,EAARN,SAWxCT,GAASiB,EAAAA,EAAAA,IAAW,CAAEZ,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,KACnCO,EAAQE,WACV,EAMgCC,UAE5BC,EAAAA,EAAAA,MAACzC,EAAW,CAAC0C,aAAa,MAAKF,SAAA,EAC7BR,EAAAA,EAAAA,KAACxB,EAAc,CAACmC,QAAS1B,EAAOuB,SAAC,UACjCR,EAAAA,EAAAA,KAAC3B,EAAS,CAACuC,KAAK,OAAOlB,KAAK,OAAOmB,GAAI5B,KACvCe,EAAAA,EAAAA,KAACrB,EAAU,CAACe,KAAK,OAAOoB,UAAU,SAElCd,EAAAA,EAAAA,KAACxB,EAAc,CAACmC,QAASxB,EAAQqB,SAAC,WAClCR,EAAAA,EAAAA,KAAC3B,EAAS,CAACuC,KAAK,QAAQlB,KAAK,QAAQmB,GAAI1B,KACzCa,EAAAA,EAAAA,KAACrB,EAAU,CAACe,KAAK,QAAQoB,UAAU,SAEnCd,EAAAA,EAAAA,KAACxB,EAAc,CAACmC,QAASvB,EAAWoB,SAAC,cACrCR,EAAAA,EAAAA,KAAC3B,EAAS,CACRuC,KAAK,WACLlB,KAAK,WACLmB,GAAIzB,EACJsB,aAAa,WAEfV,EAAAA,EAAAA,KAACrB,EAAU,CAACe,KAAK,WAAWoB,UAAU,SAEtCd,EAAAA,EAAAA,KAAClB,EAAY,CAAC8B,KAAK,SAAQJ,SAAC,iBAIpC,EC7EA,EANiB,WACf,OACER,EAAAA,EAAAA,KAACe,EAAY,GAEjB,C","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","Pages/Register/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, Form, ErrorMessage } from 'formik';\n\nexport const FormContact = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  margin: 0 auto;\n  align-items: center;\n  gap: 10px;\n  width: 300px;\n  border: 1px solid black;\n  border-radius: 15px;\n`;\n\nexport const FormInput = styled(Field)`\n  padding: 0;\n  margin: 0;\n  width: 250px;\n  font-size: 24px;\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  width: 250px;\n  font-size: 16px;\n`;\n\nexport const ErrMessage = styled(ErrorMessage)`\n  max-width: 250px;\n  color: red;\n`;\n\nexport const SubmitButton = styled.button`\n  background-color: transparent;\n  padding: 10px;\n  border-radius: 15px;\n  border: 1px solid green;\n  cursor: pointer;\n  transition: background-color 300ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: lightgreen;\n    color: #000;\n    font-weight: 600;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport * as yup from 'yup';\n\nimport { signupUser } from 'redux/auth/operationsWithUser';\n\nimport {\n  FormInput,\n  FormInputLabel,\n  SubmitButton,\n  ErrMessage,\n  FormContact,\n} from './RegisterForm.styled';\nconst RegisterForm = () => {\n  const nameID = nanoid();\n  const emailID = nanoid();\n  const passwordID = nanoid();\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Required'),\n    email: yup.string().email('Invalid email address').required('Required'),\n    password: yup\n      .string()\n      .min(7, 'Must be at least 7 characters')\n      .required('Field is required'),\n  });\n\n  const handlerFormSubmit = ({ name, email, password }, actions) => {\n    // const nameNormalized = name.toLowerCase();\n\n    // const isNameAlreadyInContacts = contacts.find(\n    //   contact => contact.name.toLowerCase() === nameNormalized\n    // );\n\n    // if (isNameAlreadyInContacts) {\n    //   alert(`${name} is already in contacts.`);\n    //   return;\n    // }\n    dispatch(signupUser({ name, email, password }));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handlerFormSubmit}\n    >\n      <FormContact autoComplete=\"off\">\n        <FormInputLabel htmlFor={nameID}>Name</FormInputLabel>\n        <FormInput type=\"name\" name=\"name\" id={nameID} />\n        <ErrMessage name=\"name\" component=\"div\" />\n\n        <FormInputLabel htmlFor={emailID}>Email</FormInputLabel>\n        <FormInput type=\"email\" name=\"email\" id={emailID} />\n        <ErrMessage name=\"email\" component=\"div\" />\n\n        <FormInputLabel htmlFor={passwordID}>Password</FormInputLabel>\n        <FormInput\n          type=\"password\"\n          name=\"password\"\n          id={passwordID}\n          autoComplete=\"false\"\n        />\n        <ErrMessage name=\"password\" component=\"div\" />\n\n        <SubmitButton type=\"submit\">Register</SubmitButton>\n      </FormContact>\n    </Formik>\n  );\n};\n\nRegisterForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default RegisterForm;\n","import RegisterForm from \"components/RegisterForm/RegisterForm\";\n\nconst Register = () => { \n  return (\n    <RegisterForm/>\n  )\n}\n\nexport default Register;\n"],"names":["FormContact","styled","Form","_templateObject","_taggedTemplateLiteral","FormInput","Field","_templateObject2","FormInputLabel","label","_templateObject3","ErrMessage","ErrorMessage","_templateObject4","SubmitButton","button","_templateObject5","nameID","nanoid","emailID","passwordID","dispatch","useDispatch","validationSchema","yup","shape","name","matches","required","email","password","min","_jsx","Formik","initialValues","onSubmit","_ref","actions","signupUser","resetForm","children","_jsxs","autoComplete","htmlFor","type","id","component","RegisterForm"],"sourceRoot":""}