{"version":3,"file":"static/js/248.f6e9fff1.chunk.js","mappings":"uQAGaA,GAAcC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uMAY1BC,GAAYJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAaM,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,4EAOzBI,EAAiBP,EAAAA,EAAOQ,MAAKC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,4EAO7BO,GAAaV,EAAAA,EAAAA,GAAOW,EAAAA,GAAPX,CAAoBY,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,8CAKjCU,EAAeb,EAAAA,EAAOc,OAAMC,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,gS,SCyCzC,EA3DkB,WAChB,IAAMa,GAAUC,EAAAA,EAAAA,MACVC,GAAaD,EAAAA,EAAAA,MACbE,GAAWC,EAAAA,EAAAA,MAOXC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAEJE,MAAM,yBACNC,SAAS,qBACZC,SAAUJ,EAAAA,KAAaG,SAAS,uBAGlCE,QAAQC,IAAIC,EAAAA,GAAUC,OAQtB,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UAEEF,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CACLC,cAzBgB,CACpBX,MAAO,GACPE,SAAU,IAwBNL,iBAAkBA,EAClBe,SAZoB,SAAHC,EAAyBC,GAAa,IAAhCd,EAAKa,EAALb,MAAOE,EAAQW,EAARX,SAClCP,GAASU,EAAAA,EAAAA,IAAU,CAAEL,MAAAA,EAAOE,SAAAA,KAAaa,MAAK,SAAAC,GAC5Cb,QAAQC,IAAIY,EACd,IACAF,EAAQG,WACV,EAOkCR,UAE5BS,EAAAA,EAAAA,MAAC3C,EAAW,CAAC4C,aAAa,KAAIV,SAAA,EAC5BF,EAAAA,EAAAA,KAACxB,EAAc,CAACqC,QAAS5B,EAAQiB,SAAC,WAClCF,EAAAA,EAAAA,KAAC3B,EAAS,CAACyC,KAAK,QAAQC,KAAK,QAAQC,GAAI/B,KACzCe,EAAAA,EAAAA,KAACrB,EAAU,CAACoC,KAAK,QAAQE,UAAU,SAEnCjB,EAAAA,EAAAA,KAACxB,EAAc,CAACqC,QAAS1B,EAAWe,SAAC,cACrCF,EAAAA,EAAAA,KAAC3B,EAAS,CACRyC,KAAK,WACLC,KAAK,WACLC,GAAI7B,EACJyB,aAAa,WAEfZ,EAAAA,EAAAA,KAACrB,EAAU,CAACoC,KAAK,WAAWE,UAAU,SAEtCjB,EAAAA,EAAAA,KAAClB,EAAY,CAACgC,KAAK,SAAQZ,SAAC,iBAKtC,EC/DA,EAJc,WACZ,OAAOF,EAAAA,EAAAA,KAACkB,EAAS,GACnB,C","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","Pages/Login/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, Form, ErrorMessage } from 'formik';\n\nexport const FormContact = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  margin: 0 auto;\n  align-items: center;\n  gap: 10px;\n  width: 300px;\n  border: 1px solid black;\n  border-radius: 15px;\n`;\n\nexport const FormInput = styled(Field)`\n  padding: 0;\n  margin: 0;\n  width: 250px;\n  font-size: 24px;\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  width: 250px;\n  font-size: 16px;\n`;\n\nexport const ErrMessage = styled(ErrorMessage)`\n  max-width: 250px;\n  color: red;\n`;\n\nexport const SubmitButton = styled.button`\n  background-color: transparent;\n  padding: 10px;\n  border-radius: 15px;\n  border: 1px solid green;\n  cursor: pointer;\n  transition: background-color 300ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: lightgreen;\n    color: #000;\n    font-weight: 600;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport * as yup from 'yup';\n\nimport { loginUser } from 'redux/auth/operationsWithUser';\n\nimport {\n  FormInput,\n  FormInputLabel,\n  SubmitButton,\n  ErrMessage,\n  FormContact,\n} from './LoginForm.styled';\n\nconst LoginForm = () => {\n  const emailID = nanoid();\n  const passwordID = nanoid();\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const validationSchema = yup.object().shape({\n    email: yup\n      .string()\n      .email('Invalid email address')\n      .required('Field is required'),\n    password: yup.string().required('Field is required'),\n  });\n\n  console.log(loginUser.error);\n\n  const handlerFormSubmit = ({ email, password }, actions) => {\n    dispatch(loginUser({ email, password })).then(res => {\n      console.log(res);\n    });\n    actions.resetForm();\n  };\n  return (\n    <>\n      {/* {isLoggedIn && <Navigate to=\"/phonebook\" replace={true} />} */}\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handlerFormSubmit}\n      >\n        <FormContact autoComplete=\"on\">\n          <FormInputLabel htmlFor={emailID}>Email</FormInputLabel>\n          <FormInput type=\"email\" name=\"email\" id={emailID} />\n          <ErrMessage name=\"email\" component=\"div\" />\n\n          <FormInputLabel htmlFor={passwordID}>Password</FormInputLabel>\n          <FormInput\n            type=\"password\"\n            name=\"password\"\n            id={passwordID}\n            autoComplete=\"false\"\n          />\n          <ErrMessage name=\"password\" component=\"div\" />\n\n          <SubmitButton type=\"submit\">Log in</SubmitButton>\n        </FormContact>\n      </Formik>\n    </>\n  );\n};\n\nLoginForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\n\nconst Login = () => {\n  return <LoginForm />;\n};\n\nexport default Login;\n"],"names":["FormContact","styled","Form","_templateObject","_taggedTemplateLiteral","FormInput","Field","_templateObject2","FormInputLabel","label","_templateObject3","ErrMessage","ErrorMessage","_templateObject4","SubmitButton","button","_templateObject5","emailID","nanoid","passwordID","dispatch","useDispatch","validationSchema","yup","shape","email","required","password","console","log","loginUser","error","_jsx","_Fragment","children","Formik","initialValues","onSubmit","_ref","actions","then","res","resetForm","_jsxs","autoComplete","htmlFor","type","name","id","component","LoginForm"],"sourceRoot":""}